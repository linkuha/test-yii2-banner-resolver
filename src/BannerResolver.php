<?php
/**
 * Created by PhpStorm.
 * User: Alexandr
 * Date: 13.09.2018
 * Time: 20:45
 */
namespace linkuha\BannerResolver;

use yii\base\BaseObject;
use yii\helpers\Url;

class BannerResolver extends BaseObject
{
    public $dir = '@web/images/';

    public $default = 'banner0';

    public $rules = [];

    private $_banner = null;
    private $_countryCode;
    private $_requestParams;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $query array
     * @param $countryCode string
     * @return BannerResolver
     * @throws \Exception
     */
    public function resolveBanner($query, $countryCode)
    {
        $this->_requestParams = $query;
        $this->_countryCode = $countryCode;

        // если баннер выбрался, а не null
        if ($banner = $this->selectBanner($this->rules)) {
            $this->_banner = $banner;
            return $this;
        }
        return $this;
    }

    /**
     * @param array $args ...
     * @return string|null
     * @throws \Exception
     */
    private function selectBanner($args)
    {
        \Yii::debug('начало обхода правил баннеров', __METHOD__);
        $tmpPercentRules = [];

        /* @var Rule $arg */
        foreach ($args as $arg) {
            \Yii::debug("создаем правило: ${arg['type']} - [${arg['key']}] => ${arg['value']}, ${arg['return']}", __METHOD__);
            $rule = new Rule(
                $arg["type"] ?? null,
                $arg["key"] ?? null,
                $arg["value"] ?? null,
                $arg["return"] ?? null,
                $arg["children"] ?? []
            );
            switch ($rule->type) {
                case Rule::RULE_PARAMETER:
                    $res = $this->findParamValue($rule->key);
                    if ($res) {
                        return $rule->return;
                    }
                    break;
                case Rule::RULE_REGION:
                    if ($this->_countryCode == mb_strtoupper($rule->value) ) {
                        if (count($rule->children) > 0) {
                            return $this->selectBanner($rule->children);
                        }
                        return $rule->return;
                    }
                    break;
                case Rule::RULE_PERCENTAGE:
                    $tmpPercentRules[$rule->return] = (int) $rule->value;
                    break;
            }
        }
        return $this->selectBannerByPercentage($tmpPercentRules);
    }

    /**
     * Array input: [ 'banner1' => '15', 'banner2' => '85' ]
     * @param mixed ...$rulesArray
     * @return string
     * @throws \Exception
     */
    private function selectBannerByPercentage($rulesArray)
    {
        if (empty($rulesArray)) {
            return null;
        }

        \Yii::debug('обработка процентных правил', __METHOD__);
        if (1 == count($rulesArray)) {
            $banner = array_keys($rulesArray);
            \Yii::debug('выбран единственный баннер - ' . $banner[0], __METHOD__);
            return $banner[0];
        }

        $table = [];
        $lastElem = 0;
        $totalPercents = 0;
        foreach ($rulesArray as $return => $percent) {
            $totalPercents += $percent;
            $rightBoard = $lastElem + $percent;
            for ($i = $lastElem; $i < $rightBoard; $i++) {
                $table[$i] = $return;
                $lastElem++;
            }
        }

        $randomKey = random_int(0, $totalPercents);
        \Yii::debug('выбран баннер - ' . $table[$randomKey], __METHOD__);
        return $table[$randomKey];
    }

    /**
     * Ищем, был ли параметр в строке запроса
     * @param $key
     * @return null
     */
    private function findParamValue($key)
    {
        \Yii::debug('ищем гет параметр ' . $key, __METHOD__);
        return $this->_requestParams[$key] ?? null;
    }

    public function isResolved()
    {
        return (bool) $this->_banner;
    }

    public function getUrl()
    {
        return Url::to($this->dir . $this->_banner ?? $this->default, true);
    }

    public function getString()
    {
        return $this->_banner ?? $this->default;
    }
}